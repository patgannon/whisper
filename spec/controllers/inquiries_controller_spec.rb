require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe InquiriesController do
  before :each do
    Project.stub(:default) { mock_project(:layout=>'norcalfreediving', :inquiries => mock_inquiries) }
  end
  
  def mock_inquiries
    @mock_inquiries ||= pageable(mock_inquiry)
  end

  def mock_inquiry(stubs={})
    @mock_inquiry ||= mock_model(Inquiry, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all inquiries as @inquiries" do
      get :index
      assigns(:inquiries).should eq(mock_inquiries)
    end
  end

  describe "GET show" do
    it "assigns the requested inquiry as @inquiry" do
      Inquiry.stub(:find).with("37") { mock_inquiry }
      get :show, :id => "37"
      assigns(:inquiry).should be(mock_inquiry)
    end
  end

  describe "GET new" do
    it "assigns a new inquiry as @inquiry" do
      Inquiry.stub(:new) { mock_inquiry }
      get :new
      assigns(:inquiry).should be(mock_inquiry)
    end
  end

  describe "GET edit" do
    it "assigns the requested inquiry as @inquiry" do
      Inquiry.stub(:find).with("37") { mock_inquiry }
      get :edit, :id => "37"
      assigns(:inquiry).should be(mock_inquiry)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created inquiry as @inquiry" do
        Inquiry.stub(:new).with({'these' => 'params'}) { mock_inquiry(:save => true) }
        post :create, :inquiry => {'these' => 'params'}
        assigns(:inquiry).should be(mock_inquiry)
      end
      
      it "assigns the new inquiry to the current project" do
        Inquiry.stub(:new).with({'these' => 'params'}) { mock_inquiry(:save => true) }
        mock_inquiry.should_receive(:project=).with(mock_project)
        post :create, :inquiry => {'these' => 'params'}
      end

      it "redirects to the created inquiry" do
        Inquiry.stub(:new) { mock_inquiry(:save => true) }
        post :create, :inquiry => {}
        response.should redirect_to(new_inquiry_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved inquiry as @inquiry" do
        Inquiry.stub(:new).with({'these' => 'params'}) { mock_inquiry(save_should_fail) }
        post :create, :inquiry => {'these' => 'params'}
        assigns(:inquiry).should be(mock_inquiry)
      end

      it "re-renders the 'new' template" do
        Inquiry.stub(:new) { mock_inquiry(save_should_fail) }
        post :create, :inquiry => {}
#        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested inquiry" do
        Inquiry.stub(:find).with("37") { mock_inquiry }
        mock_inquiry.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :inquiry => {'these' => 'params'}
      end

      it "assigns the requested inquiry as @inquiry" do
        Inquiry.stub(:find) { mock_inquiry(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:inquiry).should be(mock_inquiry)
      end

      it "redirects to the inquiry" do
        Inquiry.stub(:find) { mock_inquiry(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(inquiry_url(mock_inquiry))
      end
    end

    describe "with invalid params" do
      it "assigns the inquiry as @inquiry" do
        Inquiry.stub(:find) { mock_inquiry(update_should_fail) }
        put :update, :id => "1"
        assigns(:inquiry).should be(mock_inquiry)
      end

      it "re-renders the 'edit' template" do
        Inquiry.stub(:find) { mock_inquiry(update_should_fail) }
        put :update, :id => "1"
#        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested inquiry" do
      Inquiry.stub(:find).with("37") { mock_inquiry }
      mock_inquiry.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the inquiries list" do
      Inquiry.stub(:find) { mock_inquiry }
      delete :destroy, :id => "1"
      response.should redirect_to(inquiries_url)
    end
  end
end
