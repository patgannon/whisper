require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe DomainNamesController do
  before :each do
    Project.stub(:default) { mock_project(:layout=>'norcalfreediving', :domain_names => mock_domain_names) }
    Project.stub(:find) { mock_project }
  end
  
  def mock_domain_names
    @mock_domain_names ||= pageable(any_old(DomainName))
  end

  describe "GET index" do
    it "assigns all domain_names as @domain_names" do
      get :index
      assigns(:domain_names).should eq(mock_domain_names)
    end
  end

  describe "GET show" do
    it "assigns the requested domain_name as @domain_name" do
      DomainName.stub(:find).with("37") { any_old(DomainName) }
      get :show, :id => "37"
      assigns(:domain_name).should be(any_old(DomainName))
    end
  end

  describe "GET new" do
    it "assigns a new domain_name as @domain_name" do
      DomainName.stub(:new) { any_old(DomainName) }
      get :new
      assigns(:domain_name).should be(any_old(DomainName))
    end
  end

  describe "GET edit" do
    it "assigns the requested domain_name as @domain_name" do
      DomainName.stub(:find).with("37") { any_old(DomainName) }
      get :edit, :id => "37"
      assigns(:domain_name).should be(any_old(DomainName))
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created domain_name as @domain_name" do
        DomainName.stub(:new).with({'these' => 'params'}) { any_old(DomainName, :save => true) }
        post :create, :domain_name => {'these' => 'params'}
        assigns(:domain_name).should be(any_old(DomainName))
      end
      
      it "assigns the new domain_name to the current project" do
        DomainName.stub(:new).with({'these' => 'params'}) { any_old(DomainName, :save => true) }
        any_old(DomainName).should_receive(:project=).with(mock_project)
        post :create, :domain_name => {'these' => 'params'}
      end

      it "redirects to the created domain_name" do
        DomainName.stub(:new) { any_old(DomainName, :save => true) }
        post :create, :domain_name => {}
        response.should redirect_to(domain_names_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved domain_name as @domain_name" do
        DomainName.stub(:new).with({'these' => 'params'}) { any_old(DomainName, save_should_fail) }
        post :create, :domain_name => {'these' => 'params'}
        assigns(:domain_name).should be(any_old(DomainName))
      end

      it "re-renders the 'new' template" do
        DomainName.stub(:new) { any_old(DomainName, save_should_fail) }
        post :create, :domain_name => {}
#        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested domain_name" do
        DomainName.stub(:find).with("37") { any_old(DomainName) }
        any_old(DomainName).should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :domain_name => {'these' => 'params'}
      end

      it "assigns the requested domain_name as @domain_name" do
        DomainName.stub(:find) { any_old(DomainName, :update_attributes => true) }
        put :update, :id => "1"
        assigns(:domain_name).should be(any_old(DomainName))
      end

      it "redirects to the domain_name" do
        DomainName.stub(:find) { any_old(DomainName, :update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(domain_names_url)
      end
    end

    describe "with invalid params" do
      it "assigns the domain_name as @domain_name" do
        DomainName.stub(:find) { any_old(DomainName, update_should_fail) }
        put :update, :id => "1"
        assigns(:domain_name).should be(any_old(DomainName))
      end

      it "re-renders the 'edit' template" do
        DomainName.stub(:find) { any_old(DomainName, update_should_fail) }
        put :update, :id => "1"
#        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested domain_name" do
      DomainName.stub(:find).with("37") { any_old(DomainName) }
      any_old(DomainName).should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the domain_names list" do
      DomainName.stub(:find) { any_old(DomainName) }
      delete :destroy, :id => "1"
      response.should redirect_to(domain_names_url)
    end
  end
end
