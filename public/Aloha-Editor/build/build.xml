<?xml version = '1.0'?>
<!DOCTYPE project> 
<project name="Aloha Builder" default="all">
	<property file="build.properties" />
	<property name="srcdir" value="../WebContent/" />
	<property name="testdir" value="../test/" />
	<property name="filename" value="aloha" />
	<property name="outdir" value="out" />
	<property name="zipdir" value="out" />
	<property name="packagedir" value="${outdir}/aloha-${version}" />
	<property name="compressor" value="yuicompressor-2.4.2.jar" />
	
	<!-- files for the includes -->
	<property name="aloha.includes.filename" value="aloha-includes.txt"/>
	<property name="deps.includes.filename" value="deps-includes.txt"/>
	<property name="css.includes.filename" value="css-includes.txt"/>
	<property name="plugins.includes.filename" value="plugin-includes.txt"/>

	<!-- "debug", "aloha" and "examples" directories for the builded version -->
	<property name="debugdir" value="${packagedir}/debug" />
	<property name="alohadir" value="${packagedir}/aloha" />
	<property name="examplesdir" value="${packagedir}/examples" />

	<!-- java executable used for yui compressor -->
	<property name="java" value="${java.home}${file.separator}bin${file.separator}java" />
	
	<path id="minify.classpath">
		<fileset dir="deps">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<tstamp>
		<format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
	</tstamp>

	<!-- This target is called with parameters includefile -->
	<target name="prepare_includes" depends="makedirs">
		<copy file="${includefile}" todir="${outdir}" overwrite="true"/>
		<fixcrlf file="${outdir}/${includefile}" eol="unix"/>
		<replaceregexp file="${outdir}/${includefile}" flags="gm" match="\n" replace=" "/>
	</target>

	<!-- Make clean (remove all files from out directory) -->
	<target name="clean">
		<delete dir="${outdir}" />
		<delete dir="${zipdir}" />
	</target>

	<!-- Create the output directories -->
	<target name="makedirs">
		<mkdir dir="${packagedir}/aloha" />
		<mkdir dir="${packagedir}/debug" />
	</target>

	<!-- recreate the file include-js.inc -->
	<target name="build-dev-include" depends="makedirs">
		<!-- 
			replace everything for development includes
		-->
		
		<!-- this sets the property for the inclusion of a js file -->
		<loadfile property="dev.includejs.subst" srcfile="deps/includejs-substitution.txt"/>
		<!-- this sets the property for the inclusion of a css file -->
		<loadfile property="dev.includecss.subst" srcfile="deps/includecss-substitution.txt"/>
		
		<!-- first the deps -->
		<copy file="${deps.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${deps.includes.filename}" match="(.+)" replace="${dev.includejs.subst}"/>

		<!-- now aloha core -->
		<copy file="${aloha.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${aloha.includes.filename}" match="(.+)" replace="${dev.includejs.subst}"/>

		<!-- and the css includes -->
		<copy file="${css.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${css.includes.filename}" match="(.+)" replace="${dev.includecss.subst}"/>

		<!-- now concat the js files -->
		<concat destfile="${srcdir}/core/include.js" force="true">
			<fileset file="deps/includejs-header.txt"/>
			<filelist dir="${outdir}" files="${deps.includes.filename},${aloha.includes.filename}"></filelist>
			<fileset file="deps/includejs-footer.txt"/>
		</concat>

		<!-- and the css file -->
		<concat destfile="${srcdir}/core/css.js" force="true">
			<fileset file="deps/includecss-header.txt"/>
			<filelist dir="${outdir}" files="${css.includes.filename}"></filelist>
			<fileset file="deps/includecss-footer.txt"/>
		</concat>
		
		<!--
			replace everything for the testloader
		-->
		
		<!-- this sets the property for the inclusion of a js file -->
		<loadfile property="testloader.includejs.subst" srcfile="${testdir}includejs-substitution.txt"/>
		<!-- this sets the property for the inclusion of a css file -->
		<loadfile property="testloader.includecss.subst" srcfile="${testdir}includecss-substitution.txt"/>
		
		<!-- first the deps -->
		<copy file="${deps.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${deps.includes.filename}" match="(.+)" replace="${testloader.includejs.subst}"/>

		<!-- now aloha core -->
		<copy file="${aloha.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${aloha.includes.filename}" match="(.+)" replace="${testloader.includejs.subst}"/>

		<!-- and the css includes -->
		<copy file="${css.includes.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${css.includes.filename}" match="(.+)" replace="${testloader.includecss.subst}"/>

		<!-- now concat all files into the testloader -->
		<concat destfile="${testdir}testloader.html" force="true">
			<filelist dir="${outdir}" files="${css.includes.filename},${deps.includes.filename},${aloha.includes.filename}"></filelist>
		</concat>
	</target>

	<!-- copies the folder given in parameter "folder" from the source directory to the debug directory -->
	<target name="copytodebug">
		<mkdir dir="${debugdir}/${folder}" />
		<copy todir="${debugdir}/${folder}">
			<fileset dir="${srcdir}/${folder}" />
		</copy>
	</target>
	
	<!-- "build" Aloha, Concat all .js files into a single .js file, which contains the current version in the filename -->
	<target name="build" depends="makedirs">
		<!-- prepare the includes -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${aloha.includes.filename}"/>
		</antcall>
		<loadfile property="aloha.includes" srcfile="${outdir}/${aloha.includes.filename}"/>
		<antcall target="prepare_includes">
			<param name="includefile" value="${deps.includes.filename}"/>
		</antcall>
		<loadfile property="deps.includes" srcfile="${outdir}/${deps.includes.filename}"/>

		<!-- 
			build the debug version of Aloha 
		-->
		
		<!-- aloha without dependencies builds as debug/aloha-nodeps.js -->
		<concat destfile="${debugdir}/${filename}-nodeps.js" force="no">
			<filelist dir="${srcdir}" files="${aloha.includes}"/>
		</concat>

		<!-- replace GENTICS.Aloha.version with current version -->
		<replace file="${debugdir}/${filename}-nodeps.js" token="##ALOHAVERSION##" value="${version}"/>
		
		<!-- add dependencies build aloha.js -->
		<concat destfile="${debugdir}/${filename}.js" force="no">
			<filelist dir="${srcdir}" files="${deps.includes}"/>
			<fileset dir="${debugdir}" includes="${filename}-nodeps.js" />
		</concat>
		
		<!-- copy all necessary resources to the debug folder -->
		<antcall target="copytodebug"><param name="folder" value="deps"/></antcall>
		<antcall target="copytodebug"><param name="folder" value="css"/></antcall>
		<antcall target="copytodebug"><param name="folder" value="images"/></antcall>
		<antcall target="copytodebug"><param name="folder" value="i18n"/></antcall>
		<antcall target="copytodebug"><param name="folder" value="plugins"/></antcall>
		
		<!--
			build the final, compressed version of Aloha
		-->
		
		<!-- copy the debug output to the aloha folder -->
		<copy todir="${alohadir}">
			<fileset dir="${debugdir}" />
		</copy>
		
		<!-- compress the nodeps version -->
		<java jar="deps/${compressor}" fork="true" failonerror="true" output="${outdir}/compressor.log" append="true">
			<arg line="--type js -o ${alohadir}/${filename}-nodeps.js --nomunge --verbose --charset UTF-8 ${alohadir}/${filename}-nodeps.js" />
			<classpath refid="minify.classpath" />
		</java>
		
		<!-- compress the version with dependencies -->
		<java jar="deps/${compressor}" fork="true" failonerror="true" output="${outdir}/compressor.log" append="true">
			<arg line="--type js -o ${alohadir}/${filename}.js --nomunge --verbose --charset UTF-8 ${alohadir}/${filename}.js" />
			<classpath refid="minify.classpath" />
		</java>
		
		<!-- compress all plugin.js files -->
		<apply executable="${java}" output="${outdir}/compressor.log" append="true" failonerror="true" relative="true" dir="${alohadir}/plugins">
			<mapper type="identity" />
			
			<arg value="-cp" /> 
			<arg pathref="minify.classpath" /> 
			<arg value="-jar" />
			<arg value="${basedir}/deps/${compressor}" />
			<arg line="--type js --nomunge --verbose --charset UTF-8 -o" />
			<srcfile />
			<targetfile />

			<fileset dir="${alohadir}/plugins/">
				<exclude name="**/examples/**"/>
				<include name="**/*.js"/>
			</fileset>
		</apply>

		<!-- remove all javascript files from the deps folder as they are already included in aloha -->
		<delete>
			<fileset dir="${alohadir}/deps/" includes="**/*.js" />
		</delete>
		
		<!-- create the version files -->
		<copy todir="${packagedir}" file="${srcdir}/VERSION.txt"/>
		<replace file="${packagedir}/VERSION.txt" token="##ALOHABUILT##" value="${now}"/>
		<replace file="${packagedir}/VERSION.txt" token="##ALOHAVERSION##" value="${version}"/>
		<copy todir="${alohadir}" file="${packagedir}/VERSION.txt"/>
		<copy todir="${debugdir}" file="${packagedir}/VERSION.txt"/>
		
		<!-- copy the index file to the output and replace the versions -->
		<copy todir="${packagedir}" file="${srcdir}/index.html"/>
		<copy todir="${packagedir}" file="${srcdir}/bg.png"/>
		<copy todir="${packagedir}" file="${srcdir}/logo.gif"/>
		<replace file="${packagedir}/index.html" token="##ALOHABUILT##" value="${now}"/>
		<replace file="${packagedir}/index.html" token="##ALOHAVERSION##" value="${version}"/>

		<!--
			build the examples
		-->
		<mkdir dir="${examplesdir}"/>
		<copy todir="${examplesdir}">
			<fileset dir="${srcdir}/examples" />
		</copy>
		<!-- copy aloha to the examples -->
		<mkdir dir="${examplesdir}/aloha" />
		<copy todir="${examplesdir}/aloha">
			<fileset dir="${alohadir}" />
		</copy>
		<!-- fix the include of the main file -->
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="(&lt;script.*?src=&quot;)../core/include.js(&quot;.*)"/>
			<substitution expression="\1aloha/aloha.js\2"/>
		</replaceregexp>
		<!-- fix the includes of the plugins -->
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="(&lt;script.*?src=&quot;)../plugins/(.*?&quot;.*)"/>
			<substitution expression="\1aloha/plugins/\2"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="&lt;script&gt;GENTICS_Aloha_base.*&lt;/script&gt;"/>
			<substitution expression=""/>
		</replaceregexp>
	</target>

	<!-- Package the output into a ZIP File -->
	<target name="package">
		<mkdir dir="${zipdir}" />
		<zip destfile="${zipdir}/${filename}-${version}.zip" basedir="${outdir}" includes="aloha-${version}/**"/>
	</target>
	
	<!-- Build all -->
	<target name="all" depends="clean,build,package" />
</project>
